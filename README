.. README

==========
DLX Sudoku
==========
:Author: jw013
:Date: Dec 2011
:Version: 0.1

**NEW:** Curses interface; see below for details.

Hacking guide
=============

* DLX module
* Sudoku module

  * Curses UI 

* Matrix module

DLX
---

Files: dlx.c, dlx.h

`DLX`_ refers to the Dancing Links Algorithm for solving exact cover
matrix problems `described`__ by Donald Knuth.  The code in the ``dlx/``
subdirectory implements this generic algorithm, along with a few utility
functions to make constructing the interlocking linked lists easier.

.. _DLX: http://en.wikipedia.org/wiki/Dancing_links
.. _Knuth's paper:
__ http://www-cs-faculty.stanford.edu/~uno/papers/dancing-color.ps.gz

Feature list
^^^^^^^^^^^^

* ``dlx_exact_cover`` finds an exact cover if one exists
* ``dlx_has_cover`` tries to see how many solutions exist, up to the
  provided max.  It does not actually return any solutions. 

Sudoku
------

`Sudoku`__ can be converted to an exact cover problem, and this is
exactly what the code in the ``sudoku/`` directory does.  The process is
described in detail in the header comments of ``sudoku.c``, as well as
by `Wikipedia's article on exact cover`__.

__ http://en.wikipedia.org/wiki/Sudoku
__ http://en.wikipedia.org/wiki/Exact_cover#Sudoku

A driver program is provided in ``main.c``, and compiles into the
``ssudoku`` target.  Puzzles are read on standard input and solutions
are sent to standard output.  The representation used for input and
output Sudoku puzzles is a string of 81 characters, each one
representing a cell in the 9x9 sudoku grid, from left to right, top to
bottom.  Digits 1-9 are represented by the characters '1' - '9', and any
other character is treated as a blank.  Try ``ssudoku -h`` (currently an
invalid option) to get it to print out the usage help.

Feature list
^^^^^^^^^^^^

* ``sudoku_solve`` is the sudoku specific version of
  ``dlx_exact_cover``: it finds a solution if one exists and stops
* ``sudoku_nsolve`` is the sudoku specific version of ``dlx_has_cover``,
  except that it also returns a single solution on top of verifying the
  existence of other ones.

Curses Interface
----------------

There is a curses sudoku interface in ``sudoku_ui.c``, which also
depends on files in ``ncsudoku``, ``sudoku_grid``, and ``curseslib``.
At the moment, only it can only do editing and filling in numbers, and
has not been connected with the solver yet.  The executable is named
``ssudoku2`` although this will probably be changed in the future.

**NEW**: The current hints implementation works by recording the cell
order that the algorithm uses to fill the puzzle.  Since DLX always
chooses a constraint column with the fewest candidate rows, this is a
reasonable way to approximate human solving.  The hints work as follows:
all cells involved in the constraint being met are highlighted, so if it
is a region constraint all 9 cells in the 3x3 region are highlighted.
Further, if the constraint is a row/column/region constraint involving
more than one cell, a hint message is displayed at the bottom to give
the number to try.

* ``curseslib/curseslib.c`` provides a single curses grid-drawing
  function which draws "tic-tac-toe" type grids with parameterizable x
  and y intervals and repeat counts, along with an optional outer
  border.  It is used to draw the sudoku grid.
* ``sudoku/sudoku_grid.c`` provides a SudokuGrid struct which can be
  used to represent an interactively editable sudoku board.  It supports
  setting and clearing cell values.  It also has an option to fix the
  current board as givens, and an undo history that begins recording
  once the givens have been fixed.
* ``ncsudoku`` provides the curses structures and display functions for
  drawing a sudoku grid.  It depends on the SudokuGrid functions for its
  backend data store.

Matrix
------

This module is not really related to the rest of the project.  The code
``matrix.c`` provides a single function which takes an integer array of
only 0 and 1 and converts it to the 2D linked list format DLX uses.

A sample driver program with a hard-coded matrix is located ``test.c``.
It is the same example matrix used in _`Knuth's paper`.

Compiling
=========
::

    make 
    make test

The first target, ``all``, creates the ``ssudoku`` and ``ssudoku2``
executables described in the _`Sudoku` section above.  The second
creates the matrix test program described in _`Matrix`, ``test``.
